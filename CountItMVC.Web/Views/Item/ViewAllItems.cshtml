@model CountItMVC.Application.ViewModels.ListItemForListVm

@{
    ViewData["Title"] = "View All Items";
}

<h1>Items</h1>

<p>
    <a asp-action="AddItem">Create New</a>
</p>
<form asp-action="ViewAllItems" asp-controller="Item" method="post">
    <div class="row">
        <input type="text" asp-for="SearchString" name="searchString" id="searchString"/>
        <input type="submit" value="Search"/>
    </div>
    <div class="row">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Items[0].Id)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Items[0].Name)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Items[0].KcalPerHundredGrams)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Items[0].FatPerHundredGrams)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Items[0].ProteinPerHundredGrams)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Items[0].CarbPerHundredGrams)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Items[0].CategoryName)
                    </th>
                </tr>

            </thead>
            <!--<input type="hidden" name="CategoryId" id="CategoryId" />-->
            <tbody>
                @foreach (var item in Model.Items)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Id)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.KcalPerHundredGrams)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.FatPerHundredGrams)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ProteinPerHundredGrams)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.CarbPerHundredGrams)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.CategoryName)
                        </td>
                        <td>
                            @Html.ActionLink("Edit", "EditItem", new {  id=item.Id }) |
                            @Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |
                            @Html.ActionLink("Delete", "DeleteItem", new {  id=item.Id  })
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="row">
        <table>
            <tr>
                @for (int i = 1; i < Math.Ceiling(Model.Count / (double)Model.PageSize) + 1; i++)
                {
                <td>
                    @if(i != Model.CurrentPage)
                {
                    <a href="javascript:PagerClick(@i)">@i</a>
                }
                else
                {
                    <span>@i</span>
                }
                </td>
            }
            </tr>
        </table>
        <input type="hidden" name="pageNo" id="pageNo"/>
        <input  type="hidden" name="pageSize" id="pageSize" value="2"/>
    </div>
</form>

@section Scripts
{
    <script type="text/javascript">
        function PagerClick(ViewAllItems)
        {
            document.getElementById("pageNo").value = ViewAllItems;
            document.forms[0].submit();
        }
    </script>
}